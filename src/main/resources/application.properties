# datasource
spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.url=${DB_URL:jdbc:postgresql://localhost:5433/propostas}
spring.datasource.username=${DB_USER:propostas}
spring.datasource.password=${DB_PASS:123}

# jpa
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
#spring.datasource.platform=postgres
spring.jpa.hibernate.ddl-auto=update
#spring.jpa.properties.hibernate.show_sql=true
#spring.jpa.properties.hibernate.format_sql=true

# feign
feign.client.config.nomeFeignClienteDefinidoNoBean.read-timeout=${FEIGN_READ_TIMEOUT:100}
feign.client.config.nomeFeignClienteDefinidoNoBean.connect-timeout=${FEIGN_CONNECT_TIMEOUT:100}

analise-financeira.host=${ANALISE_FINANCEIRA_HOST:http://localhost:9999}
analise-financeira.analisa-proposta=${ANALISE_FINANCEIRA_ANALISA_PROPOSTA:/api/solicitacao}

sistema-cartao.host=${SISTEMA_CARTAO:http://localhost:8888}
sistema-cartao.consulta-cartoes=${SISTEMA_CARTAO_CONSULTA_CARTOES:/api/cartoes}
sistema-cartao.notifica-bloqueios=${SISTEMA_CARTAO_NOTIFICA_BLOQUEIOS:/api/cartoes/{id}/bloqueios}
sistema-cartao.notifica-avisos=${SISTEMA_CARTAO_NOTIFICA_AVISOS_VIAGEM:/api/cartoes/{id}/avisos}
sistema-cartao.associa-carteira=${SISTEMA_CARTAO_ASSOCIA_CARTEIRA_DIGITAL:/api/cartoes/{id}/carteiras}

# actuator
management.endpoints.web.exposure.include=info,health,prometheus
management.endpoints.web.exposure.exclude=env,beans
management.endpoint.health.show-details=always

management.endpoints.web.cors.allowed-methods=GET

management.health.db.enabled=false
management.health.diskSpace.enabled=false

info.app.name=@project.name@
info.app.version=@project.version@
info.app.description=@project.description@
info.app.encoding=@project.build.sourceEncoding@
info.app.java.version=@java.version@

# scheduller
periodicidade.consulta-numero-cartao=${PERIODICIDADE_CONSULTA_NUMERO_CARTAO:5000}

# spring security resource server configuration
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:18080/auth/realms/microservice-proposta}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://localhost:18080/auth/realms/microservice-proposta/protocol/openid-connect/certs}	

# prometheus
management.endpoints.prometheus.enabled=true
management.metrics.tags.aplicacao=${NOME_DA_APLICACAO:serviço de proposta}
management.metrics.tags.ambiente=${AMBIENTE:desenvolvimento}

# jaeger
## Habilita ou não
opentracing.jaeger.enabled=${JAEGER_ENABLED:true}

## Nome do serviço
opentracing.jaeger.service-name=${JAEGER_SERVICE_NAME:nosso.cartao.proposta}

## Endereço para enviar os metadados (trace, span, etc)
opentracing.jaeger.http-sender.url=${JAEGER_ENDPOINT:http://localhost:14268/api/traces}

## Tipo de amostragem (probabilístico) e sua configuração (1 = 100%)
opentracing.jaeger.probabilistic-sampler.sampling-rate=${JAEGER_SAMPLER:1}

## Desabilita configuração OpenTracking para JDBC
opentracing.spring.cloud.jdbc.enabled=false